.TH "RUNFILE\.SH" "1" "March 2025"
.SH "NAME"
\fBrunfile.sh – “tmux-execute” – a lightweight tmux command & layout composer\fR
.SH DESCRIPTION
.br
Basic usage:
.RS 2
.nf
$ run \-\-runfile\-help

· Usage · run ····················· Print list of all available tasks\.
          run [options] [task] ···· Run a task \.
          run [options] [action] ·· Run a Runfile/Makefile action\.

# \./Runfile syntax  
taskabc: # task description
  shell command for task abc
taskxyz: taskabc # task description, taskxyz runs taskabc first just like Make would
  shell command for task xyz
#^ whitespace doesn't matter; tabs, spaces, blank lines are all ok, or may be omitted

· Actions ·

\-h \-\-help \-\-usage ····· Print this usage documentation then exit\.
\-v \-\-version ·········· Print current runfile\.sh version then exit\.
\-\-runfile ············· Print contents of nearest Runfile \.
\-\-makefile ············ Print contents of Makefile generated from nearest Runfile\.
\-\-runfile\-edit ········ Open nearest Runfile with \\$EDITOR\.
\-\-makefile\-edit ······· Open nearest Makefile with \\$EDITOR\.
\-\-runfile\-create ······ Write template Runfile in current dir\.
\-\-makefile\-create ····· Write generated Makefile in current dir\.
\-\-runfile\-overwrite ··· Overwrite existing Runfile with template Runfile\.
\-\-makefile\-overwrite ·· Overwrite existing Makefile with generated Makefile\.
\-\-runfile\-aliases ····· Print command aliases for nearest Runfile \.

· Options ·

\-\-runfile\-compact ···· Use "compact" formatting for Runfile when creating or printing\.
\-\-runfile\-confirm ···· Always ask for confirmation before opening files with $EDITOR\.
\-\-runfile\-noconfirm ·· Never ask for confirmation before opening files with $EDITOR\.
\-\-runfile\-noedit ····· Never open files with $EDITOR\.
\-\-runfile\-verbose ···· Print code line\-by\-line to terminal during task execution\.
\-\-makefile\-compat ···· Disable all features not compatible with Make\.

\-\-make\-dry\-run ·· Don't execute task code, just print line\-by\-line to terminal instead\.
\-\-make\-* ········ Pass any argument directly to they underlying Make command
                · by prefixing the intended Make argument with "\-\-make\-"\.
                · For example, \-\-make\-dry\-run will pass \-\-dry\-run to Make\.
.fi
.RE
.SH Install
.P
Homebrew:
.RS 2
.nf
brew tap evnp/runfile\.sh && brew install runfile\.sh
.fi
.RE
.P
NPM:
.RS 2
.nf
npm install \-g runfile\.sh
.fi
.RE
.P
Curl:
.RS 2
.nf
read \-rp $'\\n'"Current directories in \\$PATH:"$'\\n'"$(echo $PATH|sed 's/:/\\n/g'|sort)"$'\\n\\n'"Enter a directory from the list above: " && [[ \-z "${REPLY}" ]] && echo "Cancelled " || ( curl \-L \-o "${REPLY/\\~/$HOME}/runfile\.sh" https://github\.com/evnp/runfile\.sh/raw/main/runfile\.sh && chmod +x "${REPLY/\\~/$HOME}/runfile\.sh" )
.fi
.RE
.P
runfile\.sh has no external dependencies, but it's good practice to audit code before downrunfile\.sh onto your system to ensure it contains nothing unexpected\. Please view the full source code for runfile\.sh here: https://github.com/evnp/runfile.sh/blob/master/runfile.sh
.P
If you also want to install runfile\.sh's man page:
.RS 2
.nf
read \-rp $'\\n'"Current directories in \\$:"$'\\n'"$(manpath|sed 's/:/\\n/g'|sort)"$'\\n\\n'"Enter a directory from the list above: " && [[ \-z "${REPLY}" ]] && echo "Cancelled " || curl \-L \-o "${REPLY/\\~/$HOME}/man1/runfile\.sh\.1" https://github\.com/evnp/runfile\.sh/raw/main/man/runfile\.sh\.1
.fi
.RE
.P
Verify installation:
.RS 2
.nf
runfile\.sh \-v
==> runfile\.sh 2\.0\.2

brew test runfile\.sh
==> Testing runfile\.sh
==> /opt/homebrew/Cellar/runfile\.sh/2\.0\.2/bin/runfile\.sh test \-\-print 1234 hello world
.fi
.RE
.SH Tests
.P
Run once:
.RS 2
.nf
npm install
npm test
.fi
.RE
.P
Use \fBfswatch\fP to re\-run tests on file changes:
.RS 2
.nf
brew install fswatch
npm install
npm run testw
.fi
.RE
.P
Non\-OSX: replace \fBbrew install fswatch\fP with package manager of choice 

