.TH "RUNFILE\.SH" "1" "September 2025"
.SH "NAME"
\fBrunfile.sh – Language-agnostic project task runner built on the ubiquitous Make.\fR
.SH DESCRIPTION
.br
Basic usage:
.RS 2
.nf
$ run \-\-help

· Usage · run ··················· Print list of all available tasks\.
          run [task] ············ Run a task\.
          run [task] [options] ·· Run a task with options available to task code\.

          run \-\-[help|version|runfile|makefile|edit|new|alias] [options]
          run \-[h|v|r|m|e|n|a] ·· Actions for managing Runfiles; details below\.

# \./Runfile \-\- syntax primer 
taskabc: # Task description\.
  shell command for task abc
taskxyz: taskabc # Task description, taskxyz runs taskabc first just like Make would\.
  shell command for task xyz
#^ Unlike Make, whitespace doesn't matter; tabs, spaces, extra blank lines are all ok\.

\-h \-\-help ··········· Print this usage documentation then exit\.
\-v \-\-version ········ Print current runfile\.sh version then exit\.
\-r \-\-runfile ········ Print contents of nearest Runfile \.
\-m \-\-makefile ······· Print contents of Makefile generated from nearest Runfile\.
\-m \-\-makefile TASK ·· Print contents of single task from generated Makefile\.
\-e \-\-edit ··········· Open nearest Runfile with \\$EDITOR\.
\-n \-\-new ············ Interactively create new Runfile in current dir\.
\-a \-\-alias ·········· Show command aliases for nearest Runfile \.
\-a \-\-alias FILENAME · Attempt to write/update aliases within shell config file\.
\-\-eject ············· Generate Makefile from Runfile and write to current dir\.

\-\-verbose ··········· Print code line\-by\-line to terminal during task execution\.
\-\-compact ··········· Use "compact" formatting for Runfile when creating or printing\.
\-\-compat ············ Disable all features not compatible with Make\.
\-\-confirm ··········· Always ask for confirmation before opening files with \\$EDITOR\.
\-\-noconfirm ········· Never ask for confirmation before opening files with \\$EDITOR\.
\-\-noedit ············ Never open files with \\$EDITOR\.
RUNFILE_VERBOSE=1 RUNFILE_COMPACT=1   RUNFILE_COMPAT=1 ·  All options may also be  ·
RUNFILE_CONFIRM=1 RUNFILE_NOCONFIRM=1 RUNFILE_NOEDIT=1 · provided as env variables ·

\-\-make\-dry\-run ······ Don't execute task code, just print line\-by\-line to terminal\.
\-\-make\-ARGUMENT ····· Pass any argument directly to they underlying Make command
                    · by prefixing the intended Make argument with "\-\-make\-"\.
                    · For example, \-\-make\-dry\-run will pass \-\-dry\-run to Make\.
.fi
.RE
.SH Install
.P
Homebrew:
.RS 2
.nf
brew tap evnp/runfile\.sh && brew install runfile\.sh
.fi
.RE
.P
NPM:
.RS 2
.nf
npm install \-g runfile\.sh
.fi
.RE
.P
Curl:
.RS 2
.nf
read \-rp $'\\n'"Current directories in \\$PATH:"$'\\n'"$(echo $PATH|sed 's/:/\\n/g'|sort)"$'\\n\\n'"Enter a directory from the list above: " && [[ \-z "${REPLY}" ]] && echo "Cancelled " || ( curl \-L \-o "${REPLY/\\~/$HOME}/runfile\.sh" https://github\.com/evnp/runfile\.sh/raw/main/runfile\.sh && chmod +x "${REPLY/\\~/$HOME}/runfile\.sh" )
.fi
.RE
.P
runfile\.sh has no external dependencies, but it's good practice to audit code before downrunfile\.sh onto your system to ensure it contains nothing unexpected\. Please view the full source code for runfile\.sh here: https://github.com/evnp/runfile.sh/blob/master/runfile.sh
.P
If you also want to install runfile\.sh's man page:
.RS 2
.nf
read \-rp $'\\n'"Current directories in \\$:"$'\\n'"$(manpath|sed 's/:/\\n/g'|sort)"$'\\n\\n'"Enter a directory from the list above: " && [[ \-z "${REPLY}" ]] && echo "Cancelled " || curl \-L \-o "${REPLY/\\~/$HOME}/man1/runfile\.sh\.1" https://github\.com/evnp/runfile\.sh/raw/main/man/runfile\.sh\.1
.fi
.RE
.P
Verify installation:
.RS 2
.nf
runfile\.sh \-v
==> runfile\.sh 2\.0\.2

brew test runfile\.sh
==> Testing runfile\.sh
==> /opt/homebrew/Cellar/runfile\.sh/2\.0\.2/bin/runfile\.sh test \-\-print 1234 hello world
.fi
.RE
.SH Tests
.P
Run once:
.RS 2
.nf
npm install
npm test
.fi
.RE
.P
Use \fBfswatch\fP to re\-run tests on file changes:
.RS 2
.nf
brew install fswatch
npm install
npm run testw
.fi
.RE
.P
Non\-OSX: replace \fBbrew install fswatch\fP with package manager of choice 

